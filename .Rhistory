labels = system.file(package=”image.darknet”, “include”, “darknet”,
data”, “voc.names”))
yolo_tiny_voc <- image_darknet_model(type = ‘detect’,
model = “tiny-yolo-voc.cfg”,
weights = system.file(package=”image.darknet”, “models”, “tiny-yolo-
voc.weights”),
labels = system.file(package=”image.darknet”, “include”, “darknet”,
data”, “voc.names”))
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-
voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet",
"data”, "voc.names"))
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-
voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet",
"data", "voc.names"))
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-
voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet",
"data", "voc.names"))
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-
voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet",
"data", "voc.names"))
library(tidyverse)
#library(readxl)
library(ggplot2)
library(cowplot)
library(dygraphs)
library(xts) # To make the convertion data-frame / xts format
library(reshape2)
library(ggthemes)
library(grid)
library(extrafont)
library(tidyverse)
library(dplyr)
library(purrr)
library(lubridate)
library(xlsx)
library(ropenaq)
library(plotly)
##heat maps packages
library(ggmap)
library(stringr)
library(viridis)
library(gganimate)
setwd("C:/Users/TCD/Documents/GitHub/covid_pollution")
source("ropenaq_measurement.R") #attaching the openaq measurement R file
start_dates <- seq(from = ymd('2020-04-25'), to = ymd(Sys.Date()), by='weeks') #lubridate
start_dates
for (i in 1:length(start_dates)) {
print(start_dates[i])
if (i != length(start_dates)) {
pollution_25 <- aq_measurements(country="IN", city="Delhi", parameter = c("pm25"), date_from = start_dates[i], date_to = start_dates[i+1])
pollution_10 <- aq_measurements(country="IN", city="Delhi", parameter = c("pm10"), date_from = start_dates[i], date_to = start_dates[i+1])
}
else {
pollution_25 <- aq_measurements(country="IN", city="Delhi", parameter = c("pm25"), date_from = start_dates[i])
pollution_10 <- aq_measurements(country="IN", city="Delhi", parameter = c("pm10"), date_from = start_dates[i])
}
write.csv(pollution_25, paste0("pm25_delhi_",start_dates[i],".csv")) ### save as csv files
write.csv(pollution_10, paste0("pm10_delhi_",start_dates[i],".csv"))
}
pollution_final <- do.call(rbind,
lapply(list.files(pattern="*.csv"), read.csv))
pollution_final %>% glimpse()
unique(pollution_final$dateLocal)
pollution_final <- pollution_final %>%
arrange (location, dateLocal)
n_distinct(pollution_final$location) # 36 unique locations
unique(pollution_final$location)  # list of 36 locations
pollution_final$local_date <- date(pollution_final$dateLocal) # extracting dates from the local date variable
pollution_final <- pollution_final %>%
arrange (location, local_date)
pollution_final$local_time <- format(as.POSIXct(pollution_final$dateUTC,tz="GMT"), tz="", usetz=TRUE)
pollution_final$local_time_60 <- format(as.POSIXct(pollution_final$local_time), format='%Y-%m-%d %H:00:00')
pollution_final <- pollution_final %>%
filter (local_date < "2020-05-04")
pollution_final$parameter <- gsub("pm25", "PM2.5", pollution_final$parameter)
pollution_final$parameter <- gsub("pm10", "PM10", pollution_final$parameter)
pollution_final_city <- pollution_final %>%
group_by(city, local_date, parameter) %>%
summarise(Mean=mean(value))
View(pollution_final_city)
line_plot <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plot <- line_plot + geom_line(size=1) +
scale_x_date(date_breaks = "7 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="grey", linetype="dashed", size=0.8) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="grey", linetype="dashed", size=0.8) +
annotate(geom = "text", x=(as.Date("2020-03-22")), y=350, label="Junta Curfew", size = 4, angle=90, vjust = 1, hjust=1)+
annotate(geom = "text", x=(as.Date("2020-03-24")), y=350, label="Complete lockdown", size = 4, angle=90, vjust = 1, hjust=1)
line_plot <- line_plot + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ",
caption = "Data: openaq.org") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10")) +
scale_color_manual(values=c('#F0E442','#0072B2'))
line_plot <- line_plot + theme(
legend.title=element_blank(),
legend.position="bottom",
plot.title = element_text(color = "black", size = 12, face = "bold",  hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
plot(line_plot)
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "30 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=10, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_minimal() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_bw() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_grey() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_light() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_linedraw() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_void() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
#publish on plotly platform
Sys.setenv("plotly_username" = "sonejapayal")
Sys.setenv("plotly_api_key" = "a1c9xWtMULGSdfHi10Gy")
api_create(x = fig, filename = "Delhi_pollution_city_April12", fileopt = "overwrite",sharing = "public" ,username = "sonejapayal")
#publish on plotly platform
Sys.setenv("plotly_username" = "sonejapayal")
Sys.setenv("plotly_api_key" = "a1c9xWtMULGSdfHi10Gy")
api_create(x = fig, filename = "Delhi_pollution_city_May4", fileopt = "overwrite",sharing = "public" ,username = "sonejapayal")
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
#publish on plotly platform
Sys.setenv("plotly_username" = "sonejapayal")
Sys.setenv("plotly_api_key" = "a1c9xWtMULGSdfHi10Gy")
api_create(x = fig, filename = "Delhi_pollution_city_May4", fileopt = "overwrite",sharing = "public" ,username = "sonejapayal")
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.5),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
Sys.setenv("plotly_username" = "sonejapayal")
Sys.setenv("plotly_api_key" = "a1c9xWtMULGSdfHi10Gy")
api_create(x = fig, filename = "Delhi_pollution_city_May5", fileopt = "overwrite",sharing = "public" ,username = "sonejapayal")
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.4),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
#publish on plotly platform
Sys.setenv("plotly_username" = "sonejapayal")
Sys.setenv("plotly_api_key" = "a1c9xWtMULGSdfHi10Gy")
api_create(x = fig, filename = "Delhi_pollution_city_May5", fileopt = "overwrite",sharing = "public" ,username = "sonejapayal")
debugSource('~/GitHub/covid_pollution/covid.R')
install.packages("ggplot2")
install.packages("xts")
install.packages("grid")
install.packages("ggplot2")
install.packages("xts")
install.packages("xts")
line_plotly <- ggplot(pollution_final_city, aes(x = local_date, y = Mean, color = parameter))
line_plotly <- line_plotly + geom_line(size=0.5) +
scale_x_date(date_breaks = "15 days" , date_labels = "%b %d") +
scale_y_continuous(limits = c(0,350), breaks=seq(0,350,50)) +
#geom_vline(xintercept=unclass(as.Date("2020-03-22")),color="black", size=0.2) +
geom_vline(xintercept=unclass(as.Date("2020-03-24")),color="black", size=0.2)
line_plotly <- line_plotly + labs(title = "Delhi Pollution levels before and after lockdown",
x = "Date", y = "Particulate matter \n ug/m3\n ") + theme_classic() +
scale_color_hue(labels = c("PM2.5", "PM10"))
line_plotly <- line_plotly + theme(
legend.title=element_blank(),
legend.text = element_text(size = 10),
plot.title = element_text(color = "black", size = 14, face = "bold", hjust = 0.5),
axis.title.x = element_text(color = "black", size = 10),
axis.title.y = element_text(color = "black", size = 10),
axis.text.x = element_text(color = "black", size = 10),
axis.text.y = element_text(color = "black", size = 10),
text=element_text(family="Times"))
fig<- ggplotly(line_plotly, dynamicTicks = TRUE) %>%
layout(legend = list(orientation = "v", x = 1, y =0.5),
annotations = list(x = c(as.Date("2020-03-22"),as.Date("2020-03-24"), 1), y = c(370,370, -0.6),
text = c("", "Complete Lockdown", "Data source: OpenAQ"), showarrow = F, textangle = c(90,0,0),
xanchor = c("left", "left", "left"), yanchor = "top",  xref= c("x", "x", "paper"),
yref = c("y", "y", "paper"), font = list(size=14))) # set the position of vertical line and the position of legend
fig <- fig %>%
rangeslider() %>%
layout(hovermode = "x", xaxis=list(nticks=15, autorange=TRUE)) #show 12 hours on x axis and change Y axis accordingly as we scroll
fig
install.packages("extrafont")
install.packages("dygraphs")
debugSource('~/GitHub/covid_pollution/covid.R')
install.packages("ggplot2")
install.packages("xts")
install.packages("ggthemes")
install.packages("grid")
